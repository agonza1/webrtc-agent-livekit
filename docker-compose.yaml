networks:
  lknetwork:
  
services:
  livekit:
    image: livekit/livekit-server:latest
    command: --config /etc/livekit.yaml
    restart: unless-stopped
    # network_mode: "host"
    ports:
    - "7880:7880"
    - "7881:7881"
    - "7882:7882"
    - "50100-50200:50100-50200"
    volumes:
      - ./livekit.yaml:/etc/livekit.yaml
      - ./certs:/etc/certs
    depends_on:
      - redis
    networks:
      - lknetwork
  redis:
    image: redis:7-alpine
    command: redis-server /etc/redis.conf
    restart: unless-stopped
    # network_mode: "host"
    # ports:
    #   - 6379:6379
    volumes:
      - ./redis.conf:/etc/redis.conf
    networks:
      - lknetwork
  agents-playground:
    build:
      context: ./agents-playground
    volumes:
      - ./agents-playground:/usr/src/app
      - /usr/src/app/node_modules   # Avoid overwriting node_modules
    env_file:
      - ./agents-playground.yaml  # Load the environment variables from the YAML file
    ports:
      - "3000:3000"
    depends_on:
      - livekit
    networks:
      - lknetwork
  agent-worker:
      build:
        context: ./agent-worker
        dockerfile: Dockerfile
      volumes:
        - ./agent-worker:/app
        - prom_data:/tmp/prometheus_multiproc
      env_file:
        - ./agent-worker/.env
      depends_on:
        - livekit
      networks:
        - lknetwork
  kokoro:
    image: ghcr.io/remsky/kokoro-fastapi-cpu:latest
    ports:
      - "8880:8880"
    networks:
      - lknetwork
  speaches:
    image: ghcr.io/speaches-ai/speaches:latest-cpu
    ports:
      - "8000:8000"
    volumes:
    - ./model_aliases.json:/home/ubuntu/speaches/model_aliases.json
    entrypoint: ["/bin/sh", "-c", "uvicorn --factory speaches.main:create_app & until curl -s http://localhost:8000/v1/models/whisper-1 > /dev/null; do echo 'Waiting for server...'; sleep 2; done; curl -X POST http://localhost:8000/v1/models/whisper-1; wait"]
    networks:
      - lknetwork
  agent-metrics:
    build: ./agent-metrics
    ports:
      - "9100:9100"
    volumes:
      - prom_data:/tmp/prometheus_multiproc
    networks:
      - lknetwork
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prom_data:/tmp/prometheus_multiproc
    networks:
      - lknetwork
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--log.level=debug'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_DISABLE_SIGNOUT_MENU=false
      - GF_AUTH_DISABLE_REMEMBER_ME=false
      - GF_AUTH_DISABLE_LOGIN=false
      - GF_AUTH_DISABLE_GRAVATAR=true
      - GF_AUTH_DISABLE_BASIC_AUTH=false
      - GF_AUTH_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=true
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_SECURITY_SECRET_KEY=your-secret-key
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=false
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS=0
      - GF_LIVE_ENABLED=true
      - GF_LIVE_MAX_CONNECTION_LIFETIME=1h
      - GF_LIVE_HA_MODE=false
      - GF_LIVE_PUSHER_ENABLED=true
      - GF_LIVE_PUSHER_BACKEND=memory
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - lknetwork
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11435:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - lknetwork
    depends_on:
      - livekit
    entrypoint: /bin/bash -c "ollama serve & sleep 5 && ollama pull llama3.2:1b && wait"

volumes:
  grafana-data:
  prom_data:
  ollama-data: